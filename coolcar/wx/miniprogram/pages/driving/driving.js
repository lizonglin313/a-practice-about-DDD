"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const centPerSec = 0.7;
Page({
    timer: undefined,
    data: {
        location: {
            latitude: 32.92,
            longitude: 118.46,
        },
        scale: 14,
        elapsed: '00:00:00',
        fee: '0.00',
    },
    onLoad(opt) {
        const o = opt;
        console.log('current trip', o.trip_id);
        this.setupLocationUpdator();
        this.setupTimer();
    },
    onUnload() {
        wx.stopLocationUpdate();
        if (this.timer) {
            clearInterval(this.timer);
        }
    },
    setupLocationUpdator() {
        wx.startLocationUpdate({
            fail: console.error,
        }),
            wx.onLocationChange(loc => {
                console.log('location: ', loc);
                this.setData({
                    location: {
                        latitude: loc.latitude,
                        longitude: loc.longitude,
                    },
                });
            });
    },
    setupTimer() {
        let elapsedSec = 0;
        let cents = 0;
        this.timer = setInterval(() => {
            elapsedSec++;
            cents += centPerSec;
            this.setData({
                elapsed: formatDuration(elapsedSec),
                fee: formatFee(cents)
            });
        }, 1000);
    }
});
function formatDuration(sec) {
    const padString = (n) => n < 10 ? '0' + n.toFixed(0) : n.toFixed(0);
    const h = Math.floor(sec / 3600);
    sec -= 3600 * h;
    const m = Math.floor(sec / 60);
    sec -= 60 * m;
    const s = Math.floor(sec);
    return `${padString(h)}:${padString(m)}:${padString(s)}`;
}
function formatFee(cents) {
    return (cents / 100).toFixed(2);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJpdmluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRyaXZpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUE7QUFFdEIsSUFBSSxDQUFDO0lBQ0QsS0FBSyxFQUFFLFNBQStCO0lBQ3RDLElBQUksRUFBRTtRQUNGLFFBQVEsRUFBRTtZQUNOLFFBQVEsRUFBRSxLQUFLO1lBQ2YsU0FBUyxFQUFFLE1BQU07U0FDcEI7UUFDRCxLQUFLLEVBQUUsRUFBRTtRQUNULE9BQU8sRUFBRSxVQUFVO1FBQ25CLEdBQUcsRUFBRSxNQUFNO0tBQ2Q7SUFFRCxNQUFNLENBQUMsR0FBOEI7UUFDakMsTUFBTSxDQUFDLEdBQXdCLEdBQUcsQ0FBQTtRQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDdEMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUE7UUFDM0IsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBQ3JCLENBQUM7SUFFRCxRQUFRO1FBQ0osRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUE7UUFDdkIsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1osYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtTQUM1QjtJQUNMLENBQUM7SUFFRCxvQkFBb0I7UUFDaEIsRUFBRSxDQUFDLG1CQUFtQixDQUFDO1lBQ25CLElBQUksRUFBRSxPQUFPLENBQUMsS0FBSztTQUN0QixDQUFDO1lBQ0YsRUFBRSxDQUFDLGdCQUFnQixDQUFFLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsQ0FBQTtnQkFDOUIsSUFBSSxDQUFDLE9BQU8sQ0FBQztvQkFDVCxRQUFRLEVBQUU7d0JBQ04sUUFBUSxFQUFFLEdBQUcsQ0FBQyxRQUFRO3dCQUN0QixTQUFTLEVBQUUsR0FBRyxDQUFDLFNBQVM7cUJBQzNCO2lCQUNKLENBQUMsQ0FBQTtZQUNOLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUNELFVBQVU7UUFDTixJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUE7UUFDbEIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFBO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFO1lBQzFCLFVBQVUsRUFBRSxDQUFBO1lBQ1osS0FBSyxJQUFJLFVBQVUsQ0FBQTtZQUNuQixJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNULE9BQU8sRUFBRSxjQUFjLENBQUMsVUFBVSxDQUFDO2dCQUNuQyxHQUFHLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQzthQUN4QixDQUFDLENBQUE7UUFDTixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDWixDQUFDO0NBQ0osQ0FBQyxDQUFBO0FBR0YsU0FBUyxjQUFjLENBQUMsR0FBVztJQUMvQixNQUFNLFNBQVMsR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQzVCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTlDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFDLElBQUksQ0FBQyxDQUFBO0lBQzlCLEdBQUcsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFBO0lBQ2YsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUMsRUFBRSxDQUFDLENBQUE7SUFDNUIsR0FBRyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDYixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3pCLE9BQU8sR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO0FBQzVELENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxLQUFhO0lBQzVCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ25DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByb3V0aW5nIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JvdXRpbmdcIlxyXG5cclxuY29uc3QgY2VudFBlclNlYyA9IDAuN1xyXG5cclxuUGFnZSh7XHJcbiAgICB0aW1lcjogdW5kZWZpbmVkIGFzIG51bWJlciB8IHVuZGVmaW5lZCxcclxuICAgIGRhdGE6IHtcclxuICAgICAgICBsb2NhdGlvbjoge1xyXG4gICAgICAgICAgICBsYXRpdHVkZTogMzIuOTIsXHJcbiAgICAgICAgICAgIGxvbmdpdHVkZTogMTE4LjQ2LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2NhbGU6IDE0LFxyXG4gICAgICAgIGVsYXBzZWQ6ICcwMDowMDowMCcsXHJcbiAgICAgICAgZmVlOiAnMC4wMCcsXHJcbiAgICB9LFxyXG5cclxuICAgIG9uTG9hZChvcHQ6IFJlY29yZDwndHJpcF9pZCcsIHN0cmluZz4pIHtcclxuICAgICAgICBjb25zdCBvOiByb3V0aW5nLkRyaXZpbmdPcHRzID0gb3B0XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2N1cnJlbnQgdHJpcCcsIG8udHJpcF9pZClcclxuICAgICAgICB0aGlzLnNldHVwTG9jYXRpb25VcGRhdG9yKClcclxuICAgICAgICB0aGlzLnNldHVwVGltZXIoKVxyXG4gICAgfSwgXHJcblxyXG4gICAgb25VbmxvYWQoKSB7XHJcbiAgICAgICAgd3guc3RvcExvY2F0aW9uVXBkYXRlKClcclxuICAgICAgICBpZiAodGhpcy50aW1lcikge1xyXG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBzZXR1cExvY2F0aW9uVXBkYXRvcigpIHtcclxuICAgICAgICB3eC5zdGFydExvY2F0aW9uVXBkYXRlKHtcclxuICAgICAgICAgICAgZmFpbDogY29uc29sZS5lcnJvcixcclxuICAgICAgICB9KSxcclxuICAgICAgICB3eC5vbkxvY2F0aW9uQ2hhbmdlKCBsb2MgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbG9jYXRpb246ICcsIGxvYylcclxuICAgICAgICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGU6IGxvYy5sYXRpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IGxvYy5sb25naXR1ZGUsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgc2V0dXBUaW1lcigpIHtcclxuICAgICAgICBsZXQgZWxhcHNlZFNlYyA9IDBcclxuICAgICAgICBsZXQgY2VudHMgPSAwXHJcbiAgICAgICAgdGhpcy50aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICAgICAgZWxhcHNlZFNlYysrXHJcbiAgICAgICAgICAgIGNlbnRzICs9IGNlbnRQZXJTZWNcclxuICAgICAgICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICAgICAgICAgIGVsYXBzZWQ6IGZvcm1hdER1cmF0aW9uKGVsYXBzZWRTZWMpLFxyXG4gICAgICAgICAgICAgICAgZmVlOiBmb3JtYXRGZWUoY2VudHMpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSwgMTAwMClcclxuICAgIH1cclxufSlcclxuXHJcblxyXG5mdW5jdGlvbiBmb3JtYXREdXJhdGlvbihzZWM6IG51bWJlcikge1xyXG4gICAgY29uc3QgcGFkU3RyaW5nID0gKG46IG51bWJlcikgPT4gXHJcbiAgICAgICAgbiA8IDEwID8gJzAnICsgbi50b0ZpeGVkKDApIDogbi50b0ZpeGVkKDApXHJcbiAgICBcclxuICAgIGNvbnN0IGggPSBNYXRoLmZsb29yKHNlYy8zNjAwKVxyXG4gICAgc2VjIC09IDM2MDAgKiBoXHJcbiAgICBjb25zdCBtID0gTWF0aC5mbG9vcihzZWMvNjApXHJcbiAgICBzZWMgLT0gNjAgKiBtXHJcbiAgICBjb25zdCBzID0gTWF0aC5mbG9vcihzZWMpXHJcbiAgICByZXR1cm4gYCR7cGFkU3RyaW5nKGgpfToke3BhZFN0cmluZyhtKX06JHtwYWRTdHJpbmcocyl9YFxyXG59XHJcblxyXG5mdW5jdGlvbiBmb3JtYXRGZWUoY2VudHM6IG51bWJlcikge1xyXG4gICAgcmV0dXJuIChjZW50cyAvIDEwMCkudG9GaXhlZCgyKVxyXG59Il19