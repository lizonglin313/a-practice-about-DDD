"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const trip_1 = require("../../service/trip");
const centPerSec = 0.7;
Page({
    timer: undefined,
    data: {
        location: {
            latitude: 32.92,
            longitude: 118.46,
        },
        scale: 14,
        elapsed: '00:00:00',
        fee: '0.00',
    },
    onLoad(opt) {
        const o = opt;
        console.log('current trip', o.trip_id);
        o.trip_id = '622e10b914592d5c50ccb7dc';
        trip_1.TripService.GetTrip(o.trip_id).then(console.log);
        this.setupLocationUpdator();
        this.setupTimer();
    },
    onUnload() {
        wx.stopLocationUpdate();
        if (this.timer) {
            clearInterval(this.timer);
        }
    },
    setupLocationUpdator() {
        wx.startLocationUpdate({
            fail: console.error,
        }),
            wx.onLocationChange(loc => {
                console.log('location: ', loc);
                this.setData({
                    location: {
                        latitude: loc.latitude,
                        longitude: loc.longitude,
                    },
                });
            });
    },
    setupTimer() {
        let elapsedSec = 0;
        let cents = 0;
        this.timer = setInterval(() => {
            elapsedSec++;
            cents += centPerSec;
            this.setData({
                elapsed: formatDuration(elapsedSec),
                fee: formatFee(cents)
            });
        }, 1000);
    }
});
function formatDuration(sec) {
    const padString = (n) => n < 10 ? '0' + n.toFixed(0) : n.toFixed(0);
    const h = Math.floor(sec / 3600);
    sec -= 3600 * h;
    const m = Math.floor(sec / 60);
    sec -= 60 * m;
    const s = Math.floor(sec);
    return `${padString(h)}:${padString(m)}:${padString(s)}`;
}
function formatFee(cents) {
    return (cents / 100).toFixed(2);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJpdmluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRyaXZpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBZ0Q7QUFHaEQsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFBO0FBRXRCLElBQUksQ0FBQztJQUNELEtBQUssRUFBRSxTQUErQjtJQUN0QyxJQUFJLEVBQUU7UUFDRixRQUFRLEVBQUU7WUFDTixRQUFRLEVBQUUsS0FBSztZQUNmLFNBQVMsRUFBRSxNQUFNO1NBQ3BCO1FBQ0QsS0FBSyxFQUFFLEVBQUU7UUFDVCxPQUFPLEVBQUUsVUFBVTtRQUNuQixHQUFHLEVBQUUsTUFBTTtLQUNkO0lBRUQsTUFBTSxDQUFDLEdBQThCO1FBQ2pDLE1BQU0sQ0FBQyxHQUF3QixHQUFHLENBQUE7UUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ3RDLENBQUMsQ0FBQyxPQUFPLEdBQUcsMEJBQTBCLENBQUE7UUFDdEMsa0JBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDaEQsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUE7UUFDM0IsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBQ3JCLENBQUM7SUFFRCxRQUFRO1FBQ0osRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUE7UUFDdkIsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1osYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtTQUM1QjtJQUNMLENBQUM7SUFFRCxvQkFBb0I7UUFDaEIsRUFBRSxDQUFDLG1CQUFtQixDQUFDO1lBQ25CLElBQUksRUFBRSxPQUFPLENBQUMsS0FBSztTQUN0QixDQUFDO1lBQ0YsRUFBRSxDQUFDLGdCQUFnQixDQUFFLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsQ0FBQTtnQkFDOUIsSUFBSSxDQUFDLE9BQU8sQ0FBQztvQkFDVCxRQUFRLEVBQUU7d0JBQ04sUUFBUSxFQUFFLEdBQUcsQ0FBQyxRQUFRO3dCQUN0QixTQUFTLEVBQUUsR0FBRyxDQUFDLFNBQVM7cUJBQzNCO2lCQUNKLENBQUMsQ0FBQTtZQUNOLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUNELFVBQVU7UUFDTixJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUE7UUFDbEIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFBO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFO1lBQzFCLFVBQVUsRUFBRSxDQUFBO1lBQ1osS0FBSyxJQUFJLFVBQVUsQ0FBQTtZQUNuQixJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNULE9BQU8sRUFBRSxjQUFjLENBQUMsVUFBVSxDQUFDO2dCQUNuQyxHQUFHLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQzthQUN4QixDQUFDLENBQUE7UUFDTixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDWixDQUFDO0NBQ0osQ0FBQyxDQUFBO0FBR0YsU0FBUyxjQUFjLENBQUMsR0FBVztJQUMvQixNQUFNLFNBQVMsR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQzVCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTlDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFDLElBQUksQ0FBQyxDQUFBO0lBQzlCLEdBQUcsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFBO0lBQ2YsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUMsRUFBRSxDQUFDLENBQUE7SUFDNUIsR0FBRyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDYixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3pCLE9BQU8sR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO0FBQzVELENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxLQUFhO0lBQzVCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ25DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmlwU2VydmljZSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlL3RyaXBcIlxyXG5pbXBvcnQgeyByb3V0aW5nIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JvdXRpbmdcIlxyXG5cclxuY29uc3QgY2VudFBlclNlYyA9IDAuN1xyXG5cclxuUGFnZSh7XHJcbiAgICB0aW1lcjogdW5kZWZpbmVkIGFzIG51bWJlciB8IHVuZGVmaW5lZCxcclxuICAgIGRhdGE6IHtcclxuICAgICAgICBsb2NhdGlvbjoge1xyXG4gICAgICAgICAgICBsYXRpdHVkZTogMzIuOTIsXHJcbiAgICAgICAgICAgIGxvbmdpdHVkZTogMTE4LjQ2LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2NhbGU6IDE0LFxyXG4gICAgICAgIGVsYXBzZWQ6ICcwMDowMDowMCcsXHJcbiAgICAgICAgZmVlOiAnMC4wMCcsXHJcbiAgICB9LFxyXG5cclxuICAgIG9uTG9hZChvcHQ6IFJlY29yZDwndHJpcF9pZCcsIHN0cmluZz4pIHtcclxuICAgICAgICBjb25zdCBvOiByb3V0aW5nLkRyaXZpbmdPcHRzID0gb3B0XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2N1cnJlbnQgdHJpcCcsIG8udHJpcF9pZClcclxuICAgICAgICBvLnRyaXBfaWQgPSAnNjIyZTEwYjkxNDU5MmQ1YzUwY2NiN2RjJ1xyXG4gICAgICAgIFRyaXBTZXJ2aWNlLkdldFRyaXAoby50cmlwX2lkKS50aGVuKGNvbnNvbGUubG9nKVxyXG4gICAgICAgIHRoaXMuc2V0dXBMb2NhdGlvblVwZGF0b3IoKVxyXG4gICAgICAgIHRoaXMuc2V0dXBUaW1lcigpXHJcbiAgICB9LCBcclxuXHJcbiAgICBvblVubG9hZCgpIHtcclxuICAgICAgICB3eC5zdG9wTG9jYXRpb25VcGRhdGUoKVxyXG4gICAgICAgIGlmICh0aGlzLnRpbWVyKSB7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcilcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHNldHVwTG9jYXRpb25VcGRhdG9yKCkge1xyXG4gICAgICAgIHd4LnN0YXJ0TG9jYXRpb25VcGRhdGUoe1xyXG4gICAgICAgICAgICBmYWlsOiBjb25zb2xlLmVycm9yLFxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIHd4Lm9uTG9jYXRpb25DaGFuZ2UoIGxvYyA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdsb2NhdGlvbjogJywgbG9jKVxyXG4gICAgICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb246IHtcclxuICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZTogbG9jLmxhdGl0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogbG9jLmxvbmdpdHVkZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH0sXHJcbiAgICBzZXR1cFRpbWVyKCkge1xyXG4gICAgICAgIGxldCBlbGFwc2VkU2VjID0gMFxyXG4gICAgICAgIGxldCBjZW50cyA9IDBcclxuICAgICAgICB0aGlzLnRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgICAgICBlbGFwc2VkU2VjKytcclxuICAgICAgICAgICAgY2VudHMgKz0gY2VudFBlclNlY1xyXG4gICAgICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgICAgICAgZWxhcHNlZDogZm9ybWF0RHVyYXRpb24oZWxhcHNlZFNlYyksXHJcbiAgICAgICAgICAgICAgICBmZWU6IGZvcm1hdEZlZShjZW50cylcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LCAxMDAwKVxyXG4gICAgfVxyXG59KVxyXG5cclxuXHJcbmZ1bmN0aW9uIGZvcm1hdER1cmF0aW9uKHNlYzogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBwYWRTdHJpbmcgPSAobjogbnVtYmVyKSA9PiBcclxuICAgICAgICBuIDwgMTAgPyAnMCcgKyBuLnRvRml4ZWQoMCkgOiBuLnRvRml4ZWQoMClcclxuICAgIFxyXG4gICAgY29uc3QgaCA9IE1hdGguZmxvb3Ioc2VjLzM2MDApXHJcbiAgICBzZWMgLT0gMzYwMCAqIGhcclxuICAgIGNvbnN0IG0gPSBNYXRoLmZsb29yKHNlYy82MClcclxuICAgIHNlYyAtPSA2MCAqIG1cclxuICAgIGNvbnN0IHMgPSBNYXRoLmZsb29yKHNlYylcclxuICAgIHJldHVybiBgJHtwYWRTdHJpbmcoaCl9OiR7cGFkU3RyaW5nKG0pfToke3BhZFN0cmluZyhzKX1gXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZvcm1hdEZlZShjZW50czogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gKGNlbnRzIC8gMTAwKS50b0ZpeGVkKDIpXHJcbn0iXX0=