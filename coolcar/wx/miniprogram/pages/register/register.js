"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const profile_1 = require("../../service/profile");
const rental_pb_1 = require("../../service/proto_gen/rental/rental_pb");
const format_1 = require("../../utils/format");
function formatDate(millis) {
    const dt = new Date(millis);
    const y = dt.getFullYear();
    const m = dt.getMonth() + 1;
    const d = dt.getDate();
    return `${format_1.padString(y)}-${format_1.padString(m)}-${format_1.padString(d)}`;
}
Page({
    redirectURL: '',
    profileRefresher: 0,
    data: {
        licNo: '',
        name: '',
        genderIndex: 0,
        genders: ['未知', '男', '女'],
        birthDate: '1990-01-01',
        licImgURL: '',
        state: rental_pb_1.rental.v1.IdentityStatus[rental_pb_1.rental.v1.IdentityStatus.UNSUBMITTED]
    },
    renderProfile(p) {
        var _a, _b, _c, _d;
        this.setData({
            licNo: ((_a = p.identity) === null || _a === void 0 ? void 0 : _a.licNumber) || '',
            name: ((_b = p.identity) === null || _b === void 0 ? void 0 : _b.name) || '',
            genderIndex: ((_c = p.identity) === null || _c === void 0 ? void 0 : _c.gender) || 0,
            birthDate: formatDate(((_d = p.identity) === null || _d === void 0 ? void 0 : _d.brithDateMillis) || 0),
            state: rental_pb_1.rental.v1.IdentityStatus[p.identityStatus || 0]
        });
    },
    onLoad(opt) {
        const o = opt;
        if (o.redirect) {
            this.redirectURL = decodeURIComponent(o.redirect);
        }
        profile_1.ProfileService.getProfile().then(p => this.renderProfile(p));
    },
    onUnload() {
        this.clearProfileRefresher();
    },
    onUploadLic() {
        wx.chooseImage({
            success: res => {
                if (res.tempFilePaths.length > 0) {
                    this.setData({
                        licImgURL: res.tempFilePaths[0]
                    });
                    const data = wx.getFileSystemManager().readFileSync(res.tempFilePaths[0]);
                    wx.request({
                        method: 'PUT',
                        url: 'https://coolcar-1258527714.cos.ap-chengdu.myqcloud.com/account_7/6238aff191d403467ac7896b?q-sign-algorithm=sha1&q-ak=AKIDkJdhX7SXNyJPJyNWQ5UdXBajdHgpjQt7&q-sign-time=1647882225%3B1647883225&q-key-time=1647882225%3B1647883225&q-header-list=content-type%3Bhost&q-url-param-list=&q-signature=e61cdf9a01088cffadc5f1246701c24967c80656',
                        data: data,
                        header: { 'content-type': 'image/jpeg' },
                        success: console.log,
                        fail: console.error,
                    });
                }
            }
        });
    },
    onGenderChange(e) {
        this.setData({
            genderIndex: parseInt(e.detail.value),
        });
    },
    onBirthDateChange(e) {
        this.setData({
            birthDate: e.detail.value,
        });
    },
    onSubmit() {
        profile_1.ProfileService.submintProfile({
            licNumber: this.data.licNo,
            name: this.data.name,
            gender: this.data.genderIndex,
            brithDateMillis: Date.parse(this.data.birthDate)
        }).then(p => {
            this.renderProfile(p);
            this.scheduleProfileRefresher();
        });
    },
    scheduleProfileRefresher() {
        this.profileRefresher = setInterval(() => {
            profile_1.ProfileService.getProfile().then(p => {
                this.renderProfile(p);
                if (p.identityStatus !== rental_pb_1.rental.v1.IdentityStatus.PENDING) {
                    this.clearProfileRefresher();
                }
                if (p.identityStatus === rental_pb_1.rental.v1.IdentityStatus.VERIFIED) {
                    this.onLicVerified();
                }
            });
        }, 1000);
    },
    clearProfileRefresher() {
        if (this.profileRefresher) {
            clearInterval(this.profileRefresher);
            this.profileRefresher = 0;
        }
    },
    onReSubmit() {
        profile_1.ProfileService.clearProfile().then(p => this.renderProfile(p));
    },
    onLicVerified() {
        if (this.redirectURL) {
            wx.redirectTo({
                url: this.redirectURL,
            });
        }
    }
});
//# sourceMappingURL=data:application/json;base64,