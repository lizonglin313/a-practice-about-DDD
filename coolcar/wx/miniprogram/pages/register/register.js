"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const profile_1 = require("../../service/profile");
const rental_pb_1 = require("../../service/proto_gen/rental/rental_pb");
const request_1 = require("../../service/request");
const format_1 = require("../../utils/format");
function formatDate(millis) {
    const dt = new Date(millis);
    const y = dt.getFullYear();
    const m = dt.getMonth() + 1;
    const d = dt.getDate();
    return `${format_1.padString(y)}-${format_1.padString(m)}-${format_1.padString(d)}`;
}
Page({
    redirectURL: '',
    profileRefresher: 0,
    data: {
        licNo: '',
        name: '',
        genderIndex: 0,
        genders: ['未知', '男', '女'],
        birthDate: '1990-01-01',
        licImgURL: '',
        state: rental_pb_1.rental.v1.IdentityStatus[rental_pb_1.rental.v1.IdentityStatus.UNSUBMITTED]
    },
    renderProfile(p) {
        this.renderIdentity(p.identity);
        this.setData({
            state: rental_pb_1.rental.v1.IdentityStatus[p.identityStatus || 0]
        });
    },
    renderIdentity(i) {
        this.setData({
            licNo: (i === null || i === void 0 ? void 0 : i.licNumber) || '',
            name: (i === null || i === void 0 ? void 0 : i.name) || '',
            genderIndex: (i === null || i === void 0 ? void 0 : i.gender) || 0,
            birthDate: formatDate((i === null || i === void 0 ? void 0 : i.brithDateMillis) || 0),
        });
    },
    onLoad(opt) {
        const o = opt;
        if (o.redirect) {
            this.redirectURL = decodeURIComponent(o.redirect);
        }
        profile_1.ProfileService.getProfile().then(p => this.renderProfile(p));
        profile_1.ProfileService.getProfilePhoto().then(p => {
            wx.downloadFile({
                url: p.url || '',
                header: { 'Content-Type': 'image/jpeg' },
                success(res) {
                    if (res.statusCode === 200) {
                        console.log(res.tempFilePath);
                        wx.setStorageSync('licPicUrl', res.tempFilePath);
                    }
                    else {
                        wx.setStorageSync('licPicUrl', '');
                    }
                },
            });
            console.log("storage", wx.getStorageSync('licPicUrl'));
            this.setData({
                licImgURL: wx.getStorageSync('licPicUrl'),
            });
        });
    },
    onReady() {
        setTimeout(res => {
            console.log("onReady-storage", wx.getStorageSync('licPicUrl'));
            this.setData({
                licImgURL: wx.getStorageSync('licPicUrl'),
            });
        }, 2000);
    },
    onUnload() {
        this.clearProfileRefresher();
    },
    onUploadLic() {
        wx.chooseImage({
            success: (res) => __awaiter(this, void 0, void 0, function* () {
                if (res.tempFilePaths.length === 0) {
                    return;
                }
                this.setData({
                    licImgURL: res.tempFilePaths[0]
                });
                const photoRes = yield profile_1.ProfileService.createProfilePhoto();
                if (!photoRes.uploadUrl) {
                    return;
                }
                yield request_1.Coolcar.uploadfile({
                    localPath: res.tempFilePaths[0],
                    url: photoRes.uploadUrl,
                });
                const identity = yield profile_1.ProfileService.completeProfilePhoto();
                this.renderIdentity(identity);
            })
        });
    },
    onGenderChange(e) {
        this.setData({
            genderIndex: parseInt(e.detail.value),
        });
    },
    onBirthDateChange(e) {
        this.setData({
            birthDate: e.detail.value,
        });
    },
    onSubmit() {
        profile_1.ProfileService.submintProfile({
            licNumber: this.data.licNo,
            name: this.data.name,
            gender: this.data.genderIndex,
            brithDateMillis: Date.parse(this.data.birthDate)
        }).then(p => {
            this.renderProfile(p);
            this.scheduleProfileRefresher();
        });
    },
    scheduleProfileRefresher() {
        this.profileRefresher = setInterval(() => {
            profile_1.ProfileService.getProfile().then(p => {
                this.renderProfile(p);
                if (p.identityStatus !== rental_pb_1.rental.v1.IdentityStatus.PENDING) {
                    this.clearProfileRefresher();
                }
                if (p.identityStatus === rental_pb_1.rental.v1.IdentityStatus.VERIFIED) {
                    this.onLicVerified();
                }
            });
        }, 1000);
    },
    clearProfileRefresher() {
        if (this.profileRefresher) {
            clearInterval(this.profileRefresher);
            this.profileRefresher = 0;
        }
    },
    onReSubmit() {
        profile_1.ProfileService.clearProfile().then(p => this.renderProfile(p));
        profile_1.ProfileService.clearProfilePhoto().then(() => {
            this.setData({
                licImgURL: '',
            });
        });
        wx.setStorageSync('licPicUrl', '');
    },
    onLicVerified() {
        if (this.redirectURL) {
            wx.redirectTo({
                url: this.redirectURL,
            });
        }
    }
});
//# sourceMappingURL=data:application/json;base64,